name: PyQBDI Linux package

on:
  push:
    branches:
      - master
      - dev-next
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        QBDI_ARCH: ['X86_64', 'X86']
    env:
      QBDI_PLATFORM: 'linux'
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Cache ccache
        uses: actions/cache@v2
        id: cache-ccache
        with:
          path: |
            ~/.ccache
          key: ccache-pyqbdi-linux-${{ matrix.QBDI_ARCH }}-${{ hashFiles('.github/workflows/ccache.conf') }}-${{ github.run_number }}
          restore-keys: |
            ccache-pyqbdi-linux-${{ matrix.QBDI_ARCH }}-${{ hashFiles('.github/workflows/ccache.conf') }}-
      - if: steps.cache-ccache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.ccache
          cp .github/workflows/ccache.conf ~/.ccache/ccache.conf
      - name: Cache third-party
        uses: actions/cache@v2
        with:
          path: |
            third-party
          key: QBDI-third-party-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('**/*.cmake') }}
      - name: Create build image
        env:
          QBDI_ARCH: ${{ matrix.QBDI_ARCH }}
        run: bash ./docker/ci_python_linux/img_build.sh
      - name: Build Wheel
        env:
          QBDI_ARCH: ${{ matrix.QBDI_ARCH }}
        run: bash ./docker/ci_python_linux/whl_build.sh
      - name: Export wheel
        uses: actions/upload-artifact@v2
        with:
          name: PyQBDI linux ${{ matrix.QBDI_ARCH }}
          path: outwheel/*

  trigger-rtd:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Extract branch name
        if: github.event_name == 'push'
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: trigger Read The docs build
        if: github.event_name == 'push'
        run: |
          curl -X POST -d "branches=${BRANCH}" -d "token=${RTD_TOKEN}" https://readthedocs.org/api/v2/webhook/qbdi/145608/
        env:
          RTD_TOKEN: ${{ secrets.RTD_TOKEN }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}


