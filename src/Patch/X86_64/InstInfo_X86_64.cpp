/*
 * This file is part of QBDI.
 *
 * Copyright 2017 Quarkslab
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "InstInfo_X86_64.h"

namespace QBDI {

unsigned READ_8[] = { 
	llvm::X86::CMP8rm,
	llvm::X86::CMP8mr,
	llvm::X86::TEST8mr,
	llvm::X86::MOV8rm,
	llvm::X86::ADC8rm,
	llvm::X86::ADD8rm,
	llvm::X86::AND8rm,
	llvm::X86::LXADD8,
	llvm::X86::OR8rm,
	llvm::X86::SBB8rm,
	llvm::X86::SUB8rm,
	llvm::X86::XCHG8rm,
	llvm::X86::XOR8rm,
	llvm::X86::IDIV8m,
	llvm::X86::IMUL8m,
	llvm::X86::DIV8m,
	llvm::X86::MUL8m,
	llvm::X86::MOVSX16rm8,
	llvm::X86::MOVZX16rm8,
	llvm::X86::CRC32r32m8,
	llvm::X86::CRC32r64m8,
	llvm::X86::MOVSX32rm8,
	llvm::X86::MOVZX32rm8,
	llvm::X86::MOVSX64rm8,
	llvm::X86::CMP8mi,
	llvm::X86::CMP8mi8,
	llvm::X86::TEST8mi,

	llvm::X86::DEC8m,
	llvm::X86::INC8m,
	llvm::X86::LOCK_DEC8m,
	llvm::X86::LOCK_INC8m,
	llvm::X86::NEG8m,
	llvm::X86::NOT8m,
	llvm::X86::RCL8m1,
	llvm::X86::RCL8mCL,
	llvm::X86::RCR8m1,
	llvm::X86::RCR8mCL,
	llvm::X86::ROL8m1,
	llvm::X86::ROL8mCL,
	llvm::X86::ROR8m1,
	llvm::X86::ROR8mCL,
	llvm::X86::SHL8m1,
	llvm::X86::SHL8mCL,
	llvm::X86::SHR8m1,
	llvm::X86::SHR8mCL,
	llvm::X86::ADC8mr,
	llvm::X86::ADD8mr,
	llvm::X86::AND8mr,
	llvm::X86::CMPXCHG8rm,
	llvm::X86::LCMPXCHG8,
	llvm::X86::LOCK_ADD8mr,
	llvm::X86::LOCK_AND8mr,
	llvm::X86::LOCK_OR8mr,
	llvm::X86::LOCK_SUB8mr,
	llvm::X86::LOCK_XOR8mr,
	llvm::X86::OR8mr,
	llvm::X86::RELEASE_MOV8mr,
	llvm::X86::SBB8mr,
	llvm::X86::SUB8mr,
	llvm::X86::XADD8rm,
	llvm::X86::XOR8mr,
	llvm::X86::ADC8mi,
	llvm::X86::ADC8mi8,
	llvm::X86::ADD8mi,
	llvm::X86::ADD8mi8,
	llvm::X86::AND8mi,
	llvm::X86::AND8mi8,
	llvm::X86::LOCK_ADD8mi,
	llvm::X86::LOCK_AND8mi,
	llvm::X86::LOCK_OR8mi,
	llvm::X86::LOCK_SUB8mi,
	llvm::X86::LOCK_XOR8mi,
	llvm::X86::OR8mi,
	llvm::X86::OR8mi8,
	llvm::X86::RCL8mi,
	llvm::X86::RCR8mi,
	llvm::X86::RELEASE_ADD8mi,
	llvm::X86::RELEASE_AND8mi,
	llvm::X86::RELEASE_MOV8mi,
	llvm::X86::RELEASE_OR8mi,
	llvm::X86::RELEASE_XOR8mi,
	llvm::X86::ROL8mi,
	llvm::X86::ROR8mi,
	llvm::X86::SAR8mi,
	llvm::X86::SBB8mi,
	llvm::X86::SHL8mi,
	llvm::X86::SHR8mi,
	llvm::X86::SUB8mi,
	llvm::X86::SUB8mi8,
	llvm::X86::XOR8mi,
	llvm::X86::XOR8mi8
};

size_t READ_8_SIZE = sizeof(READ_8)/sizeof(unsigned);

unsigned READ_16[] = { 
	llvm::X86::MOV16rm,
	llvm::X86::MOVBE16rm,
	llvm::X86::CMP16rm,
	llvm::X86::TEST16mr,
	llvm::X86::ADD_FI16m,
	llvm::X86::CALL16m,
	llvm::X86::DIV16m,
	llvm::X86::DIVR_FI16m,
	llvm::X86::DIV_FI16m,
	llvm::X86::FICOM16m,
	llvm::X86::FICOMP16m,
	llvm::X86::FLDCW16m,
	llvm::X86::FNSTCW16m,
	llvm::X86::IDIV16m,
	llvm::X86::ILD_F16m,
	llvm::X86::IMUL16m,
	llvm::X86::JMP16m,
	llvm::X86::MUL16m,
	llvm::X86::MUL_FI16m,
	llvm::X86::PUSH16rmm,
	llvm::X86::SUBR_FI16m,
	llvm::X86::SUB_FI16m,
	llvm::X86::ADC16rm,
	llvm::X86::ADD16rm,
	llvm::X86::AND16rm,
	llvm::X86::BT16mr,
	llvm::X86::BTC16mr,
	llvm::X86::BTR16mr,
	llvm::X86::BTS16mr,
	llvm::X86::CMP16mr,
	llvm::X86::CMOVA16rm,
	llvm::X86::CMOVAE16rm,
	llvm::X86::CMOVB16rm,
	llvm::X86::CMOVBE16rm,
	llvm::X86::CMOVE16rm,
	llvm::X86::CMOVG16rm,
	llvm::X86::CMOVGE16rm,
	llvm::X86::CMOVL16rm,
	llvm::X86::CMOVLE16rm,
	llvm::X86::CMOVNE16rm,
	llvm::X86::CMOVNO16rm,
	llvm::X86::CMOVNP16rm,
	llvm::X86::CMOVNS16rm,
	llvm::X86::CMOVO16rm,
	llvm::X86::CMOVP16rm,
	llvm::X86::CMOVS16rm,
	llvm::X86::IMUL16rm,
	llvm::X86::LXADD16,
	llvm::X86::OR16rm,
	llvm::X86::SBB16rm,
	llvm::X86::SUB16rm,
	llvm::X86::XCHG16rm,
	llvm::X86::XOR16rm,
	llvm::X86::BOUNDS16rm,
	llvm::X86::BSF16rm,
	llvm::X86::BSR16rm,
	llvm::X86::LZCNT16rm,
	llvm::X86::POPCNT16rm,
	llvm::X86::TZCNT16rm,
	llvm::X86::CMP16mi8,
	llvm::X86::IMUL16rmi8,
	llvm::X86::IMUL16rmi,
	llvm::X86::TEST16mi,
	llvm::X86::CRC32r32m16,
	llvm::X86::MOVSX32rm16,
	llvm::X86::MOVZX32rm16,
	llvm::X86::MOVSX64rm16,

	llvm::X86::DEC16m,
	llvm::X86::INC16m,
	llvm::X86::LOCK_DEC16m,
	llvm::X86::LOCK_INC16m,
	llvm::X86::NEG16m,
	llvm::X86::NOT16m,
	llvm::X86::RCL16m1,
	llvm::X86::RCL16mCL,
	llvm::X86::RCR16m1,
	llvm::X86::RCR16mCL,
	llvm::X86::RELEASE_DEC16m,
	llvm::X86::RELEASE_INC16m,
	llvm::X86::ROL16m1,
	llvm::X86::ROL16mCL,
	llvm::X86::ROR16m1,
	llvm::X86::ROR16mCL,
	llvm::X86::SAR16m1,
	llvm::X86::SAR16mCL,
	llvm::X86::SHL16m1,
	llvm::X86::SHL16mCL,
	llvm::X86::SHR16m1,
	llvm::X86::SHR16mCL,
	llvm::X86::ADC16mr,
	llvm::X86::ADD16mr,
	llvm::X86::AND16mr,
	llvm::X86::CMPXCHG16rm,
	llvm::X86::LCMPXCHG16,
	llvm::X86::LOCK_ADD16mr,
	llvm::X86::LOCK_AND16mr,
	llvm::X86::LOCK_OR16mr,
	llvm::X86::LOCK_SUB16mr,
	llvm::X86::LOCK_XOR16mr,
	llvm::X86::OR16mr,
	llvm::X86::SBB16mr,
	llvm::X86::SHLD16mrCL,
	llvm::X86::SHRD16mrCL,
	llvm::X86::SUB16mr,
	llvm::X86::XADD16rm,
	llvm::X86::XOR16mr,
	llvm::X86::SHLD16mri8,
	llvm::X86::SHRD16mri8,
	llvm::X86::ADC16mi8,
	llvm::X86::ADD16mi8,
	llvm::X86::AND16mi8,
	llvm::X86::BT16mi8,
	llvm::X86::BTC16mi8,
	llvm::X86::BTR16mi8,
	llvm::X86::BTS16mi8,
	llvm::X86::LOCK_ADD16mi8,
	llvm::X86::LOCK_AND16mi8,
	llvm::X86::LOCK_OR16mi8,
	llvm::X86::LOCK_SUB16mi8,
	llvm::X86::LOCK_XOR16mi8,
	llvm::X86::OR16mi8,
	llvm::X86::SBB16mi8,
	llvm::X86::SUB16mi8,
	llvm::X86::XOR16mi8,
	llvm::X86::ADC16mi,
	llvm::X86::ADD16mi,
	llvm::X86::AND16mi,
	llvm::X86::CMP16mi,
	llvm::X86::LOCK_ADD16mi,
	llvm::X86::LOCK_AND16mi,
	llvm::X86::LOCK_OR16mi,
	llvm::X86::LOCK_SUB16mi,
	llvm::X86::LOCK_XOR16mi,
	llvm::X86::OR16mi,
	llvm::X86::SBB16mi,
	llvm::X86::SUB16mi,
	llvm::X86::XOR16mi,
	llvm::X86::RCL16mi,
	llvm::X86::RCR16mi,
	llvm::X86::SAR16mi,
	llvm::X86::SHL16mi,
	llvm::X86::SHR16mi
};

size_t READ_16_SIZE = sizeof(READ_16)/sizeof(unsigned);

unsigned READ_32[] = { 
	llvm::X86::MOV32rm,
	llvm::X86::CMP32rm,
	llvm::X86::TEST32mr,
	llvm::X86::ADD_FI32m,
	llvm::X86::CALL32m,
	llvm::X86::DIV32m,
	llvm::X86::DIVR_FI32m,
	llvm::X86::DIV_FI32m,
	llvm::X86::FICOM32m,
	llvm::X86::FICOMP32m,
	llvm::X86::IDIV32m,
	llvm::X86::ILD_F32m,
	llvm::X86::IMUL32m,
	llvm::X86::JMP32m,
	llvm::X86::LDMXCSR,
	llvm::X86::MUL32m,
	llvm::X86::MUL_FI32m,
	llvm::X86::PUSH32rmm,
	llvm::X86::SUBR_FI32m,
	llvm::X86::SUB_FI32m,
	llvm::X86::VLDMXCSR,
	llvm::X86::BT32mr,
	llvm::X86::BTC32mr,
	llvm::X86::BTR32mr,
	llvm::X86::BTS32mr,
	llvm::X86::CMP32mr,
	llvm::X86::BT32mi8,
	llvm::X86::BTC32mi8,
	llvm::X86::BTR32mi8,
	llvm::X86::BTS32mi8,
	llvm::X86::CMP32mi8,
	llvm::X86::CMP32mi,
	llvm::X86::TEST32mi,
	llvm::X86::ADC32rm,
	llvm::X86::ADCX32rm,
	llvm::X86::ADD32rm,
	llvm::X86::AND32rm,
	llvm::X86::ANDN32rm,
	llvm::X86::CMOVA32rm,
	llvm::X86::CMOVAE32rm,
	llvm::X86::CMOVB32rm,
	llvm::X86::CMOVBE32rm,
	llvm::X86::CMOVE32rm,
	llvm::X86::CMOVG32rm,
	llvm::X86::CMOVGE32rm,
	llvm::X86::CMOVL32rm,
	llvm::X86::CMOVLE32rm,
	llvm::X86::CMOVNE32rm,
	llvm::X86::CMOVNO32rm,
	llvm::X86::CMOVNP32rm,
	llvm::X86::CMOVNS32rm,
	llvm::X86::CMOVO32rm,
	llvm::X86::CMOVP32rm,
	llvm::X86::CMOVS32rm,
	llvm::X86::CRC32r32m32,
	llvm::X86::IMUL32rm,
	llvm::X86::LXADD32,
	llvm::X86::OR32rm,
	llvm::X86::PDEP32rm,
	llvm::X86::PEXT32rm,
	llvm::X86::SBB32rm,
	llvm::X86::SUB32rm,
	llvm::X86::XCHG32rm,
	llvm::X86::XOR32rm,
	llvm::X86::ADOX32rm,
	llvm::X86::BLCFILL32rm,
	llvm::X86::BLCI32rm,
	llvm::X86::BLCIC32rm,
	llvm::X86::BLCMSK32rm,
	llvm::X86::BLCS32rm,
	llvm::X86::BLSFILL32rm,
	llvm::X86::BLSI32rm,
	llvm::X86::BLSIC32rm,
	llvm::X86::BLSMSK32rm,
	llvm::X86::BLSR32rm,
	llvm::X86::BOUNDS32rm,
	llvm::X86::BSF32rm,
	llvm::X86::BSR32rm,
	llvm::X86::LZCNT32rm,
	llvm::X86::POPCNT32rm,
	llvm::X86::T1MSKC32rm,
	llvm::X86::TZCNT32rm,
	llvm::X86::TZMSK32rm,
	llvm::X86::TZMSK32rm,
	llvm::X86::BEXTR32rm,
	llvm::X86::BZHI32rm,
	llvm::X86::SARX32rm,
	llvm::X86::SHLX32rm,
	llvm::X86::SHRX32rm,
	llvm::X86::IMUL32rmi8,
	llvm::X86::BEXTRI32mi,
	llvm::X86::IMUL32rmi,
	llvm::X86::RORX32mi,
	llvm::X86::MULX32rm,
	llvm::X86::MOVSX64rm32,

	llvm::X86::DEC32m,
	llvm::X86::INC32m,
	llvm::X86::LOCK_DEC32m,
	llvm::X86::LOCK_INC32m,
	llvm::X86::NEG32m,
	llvm::X86::NOT32m,
	llvm::X86::RCL32m1,
	llvm::X86::RCL32mCL,
	llvm::X86::RCR32m1,
	llvm::X86::RCR32mCL,
	llvm::X86::ROL32m1,
	llvm::X86::ROL32mCL,
	llvm::X86::ROR32m1,
	llvm::X86::ROR32mCL,
	llvm::X86::SAR32m1,
	llvm::X86::SAR32mCL,
	llvm::X86::SHL32m1,
	llvm::X86::SHL32mCL,
	llvm::X86::SHR32m1,
	llvm::X86::SHR32mCL,
	llvm::X86::ADC32mr,
	llvm::X86::ADD32mr,
	llvm::X86::AND32mr,
	llvm::X86::CMPXCHG32rm,
	llvm::X86::LCMPXCHG32,
	llvm::X86::LOCK_ADD32mr,
	llvm::X86::LOCK_AND32mr,
	llvm::X86::LOCK_OR32mr,
	llvm::X86::LOCK_SUB32mr,
	llvm::X86::LOCK_XOR32mr,
	llvm::X86::OR32mr,
	llvm::X86::OR32mrLocked,
	llvm::X86::SBB32mr,
	llvm::X86::SHLD32mrCL,
	llvm::X86::SHRD32mrCL,
	llvm::X86::SUB32mr,
	llvm::X86::XADD32rm,
	llvm::X86::XOR32mr,
	llvm::X86::SHLD32mri8,
	llvm::X86::SHRD32mri8,
	llvm::X86::ADC32mi8,
	llvm::X86::ADD32mi8,
	llvm::X86::AND32mi8,
	llvm::X86::LOCK_ADD32mi8,
	llvm::X86::LOCK_AND32mi8,
	llvm::X86::LOCK_OR32mi8,
	llvm::X86::LOCK_SUB32mi8,
	llvm::X86::LOCK_XOR32mi8,
	llvm::X86::OR32mi8,
	llvm::X86::SBB32mi8,
	llvm::X86::SUB32mi8,
	llvm::X86::XOR32mi8,
	llvm::X86::ADC32mi,
	llvm::X86::ADD32mi,
	llvm::X86::AND32mi,
	llvm::X86::LOCK_ADD32mi,
	llvm::X86::LOCK_AND32mi,
	llvm::X86::LOCK_OR32mi,
	llvm::X86::LOCK_SUB32mi,
	llvm::X86::LOCK_XOR32mi,
	llvm::X86::OR32mi,
	llvm::X86::SBB32mi,
	llvm::X86::SUB32mi,
	llvm::X86::XOR32mi,
	llvm::X86::RCL32mi,
	llvm::X86::RCR32mi,
	llvm::X86::ROL32mi,
	llvm::X86::ROR32mi,
	llvm::X86::SAR32mi,
	llvm::X86::SHL32mi,
	llvm::X86::SHR32mi
};

size_t READ_32_SIZE = sizeof(READ_32)/sizeof(unsigned);

unsigned READ_64[] = { 
	llvm::X86::MOV64rm,
	llvm::X86::CMP64rm,
	llvm::X86::TEST64mr,
	llvm::X86::CALL64m,
	llvm::X86::DIV64m,
	llvm::X86::IDIV64m,
	llvm::X86::IMUL64m,
	llvm::X86::JMP64m,
	llvm::X86::MUL64m,
	llvm::X86::PUSH64rmm,
	llvm::X86::BT64mr,
	llvm::X86::BTC64mr,
	llvm::X86::BTR64mr,
	llvm::X86::BTS64mr,
	llvm::X86::CMP64mr,
	llvm::X86::CMP64mi32,
	llvm::X86::TEST64mi32,
	llvm::X86::BT64mi8,
	llvm::X86::BTC64mi8,
	llvm::X86::BTR64mi8,
	llvm::X86::BTS64mi8,
	llvm::X86::CMP64mi8,
	llvm::X86::ADC64rm,
	llvm::X86::ADCX64rm,
	llvm::X86::ADD64rm,
	llvm::X86::AND64rm,
	llvm::X86::ANDN64rm,
	llvm::X86::CMOVA64rm,
	llvm::X86::CMOVAE64rm,
	llvm::X86::CMOVB64rm,
	llvm::X86::CMOVBE64rm,
	llvm::X86::CMOVE64rm,
	llvm::X86::CMOVG64rm,
	llvm::X86::CMOVGE64rm,
	llvm::X86::CMOVL64rm,
	llvm::X86::CMOVLE64rm,
	llvm::X86::CMOVNE64rm,
	llvm::X86::CMOVNO64rm,
	llvm::X86::CMOVNP64rm,
	llvm::X86::CMOVNS64rm,
	llvm::X86::CMOVO64rm,
	llvm::X86::CMOVP64rm,
	llvm::X86::CMOVS64rm,
	llvm::X86::CRC32r64m64,
	llvm::X86::IMUL64rm,
	llvm::X86::LXADD64,
	llvm::X86::OR64rm,
	llvm::X86::PDEP64rm,
	llvm::X86::PEXT64rm,
	llvm::X86::SBB64rm,
	llvm::X86::SUB64rm,
	llvm::X86::XCHG64rm,
	llvm::X86::XOR64rm,
	llvm::X86::BLCFILL64rm,
	llvm::X86::BLCI64rm,
	llvm::X86::BLCIC64rm,
	llvm::X86::BLCMSK64rm,
	llvm::X86::BLCS64rm,
	llvm::X86::BLSFILL64rm,
	llvm::X86::BLSI64rm,
	llvm::X86::BLSIC64rm,
	llvm::X86::BLSMSK64rm,
	llvm::X86::BLSR64rm,
	llvm::X86::BSF64rm,
	llvm::X86::BSR64rm,
	llvm::X86::LZCNT64rm,
	llvm::X86::POPCNT64rm,
	llvm::X86::T1MSKC64rm,
	llvm::X86::TZCNT64rm,
	llvm::X86::TZMSK64rm,
	llvm::X86::TZMSK64rm,
	llvm::X86::BEXTRI64mi,
	llvm::X86::IMUL64rmi32,
	llvm::X86::IMUL64rmi8,
	llvm::X86::RORX64mi,
	llvm::X86::MULX64rm,

	llvm::X86::CMPXCHG8B,
	llvm::X86::DEC64m,
	llvm::X86::INC64m,
	llvm::X86::LCMPXCHG8B,
	llvm::X86::LOCK_DEC64m,
	llvm::X86::LOCK_INC64m,
	llvm::X86::NEG64m,
	llvm::X86::NOT64m,
	llvm::X86::RCL64m1,
	llvm::X86::RCL64mCL,
	llvm::X86::RCR64m1,
	llvm::X86::RCR64mCL,
	llvm::X86::ROL64m1,
	llvm::X86::ROL64mCL,
	llvm::X86::ROR64m1,
	llvm::X86::ROR64mCL,
	llvm::X86::SAR64m1,
	llvm::X86::SAR64mCL,
	llvm::X86::SHL64m1,
	llvm::X86::SHL64mCL,
	llvm::X86::SHR64m1,
	llvm::X86::SHR64mCL,
	llvm::X86::ADC64mr,
	llvm::X86::ADD64mr,
	llvm::X86::AND64mr,
	llvm::X86::CMPXCHG64rm,
	llvm::X86::LCMPXCHG64,
	llvm::X86::LOCK_ADD64mr,
	llvm::X86::LOCK_AND64mr,
	llvm::X86::LOCK_OR64mr,
	llvm::X86::LOCK_SUB64mr,
	llvm::X86::LOCK_XOR64mr,
	llvm::X86::OR64mr,
	llvm::X86::SBB64mr,
	llvm::X86::SHLD64mrCL,
	llvm::X86::SHRD64mrCL,
	llvm::X86::SUB64mr,
	llvm::X86::XADD64rm,
	llvm::X86::XOR64mr,
	llvm::X86::SHLD64mri8,
	llvm::X86::SHRD64mri8,
	llvm::X86::ADC64mi32,
	llvm::X86::ADD64mi32,
	llvm::X86::AND64mi32,
	llvm::X86::LOCK_ADD64mi32,
	llvm::X86::LOCK_AND64mi32,
	llvm::X86::LOCK_OR64mi32,
	llvm::X86::LOCK_SUB64mi32,
	llvm::X86::LOCK_XOR64mi32,
	llvm::X86::OR64mi32,
	llvm::X86::SBB64mi32,
	llvm::X86::SUB64mi32,
	llvm::X86::XOR64mi32,
	llvm::X86::ADC64mi8,
	llvm::X86::ADD64mi8,
	llvm::X86::AND64mi8,
	llvm::X86::LOCK_ADD64mi8,
	llvm::X86::LOCK_AND64mi8,
	llvm::X86::LOCK_OR64mi8,
	llvm::X86::LOCK_SUB64mi8,
	llvm::X86::LOCK_XOR64mi8,
	llvm::X86::OR64mi8,
	llvm::X86::SBB64mi8,
	llvm::X86::SUB64mi8,
	llvm::X86::XOR64mi8,
	llvm::X86::RCL64mi,
	llvm::X86::RCR64mi,
	llvm::X86::ROL64mi,
	llvm::X86::ROR64mi,
	llvm::X86::SAR64mi,
	llvm::X86::SHL64mi,
	llvm::X86::SHR64mi
};

size_t READ_64_SIZE = sizeof(READ_64)/sizeof(unsigned);

unsigned WRITE_8[] = { 
	llvm::X86::MOV8mr,
	llvm::X86::SETAEm,
	llvm::X86::SETAm,
	llvm::X86::SETBEm,
	llvm::X86::SETBm,
	llvm::X86::SETEm,
	llvm::X86::SETGEm,
	llvm::X86::SETGm,
	llvm::X86::SETLEm,
	llvm::X86::SETLm,
	llvm::X86::SETNEm,
	llvm::X86::SETNOm,
	llvm::X86::SETNPm,
	llvm::X86::SETNSm,
	llvm::X86::SETOm,
	llvm::X86::SETSm,
	llvm::X86::DEC8m,
	llvm::X86::INC8m,
	llvm::X86::LOCK_DEC8m,
	llvm::X86::LOCK_INC8m,
	llvm::X86::NEG8m,
	llvm::X86::NOT8m,
	llvm::X86::RCL8m1,
	llvm::X86::RCL8mCL,
	llvm::X86::RCR8m1,
	llvm::X86::RCR8mCL,
	llvm::X86::ROL8m1,
	llvm::X86::ROL8mCL,
	llvm::X86::ROR8m1,
	llvm::X86::ROR8mCL,
	llvm::X86::SHL8m1,
	llvm::X86::SHL8mCL,
	llvm::X86::SHR8m1,
	llvm::X86::SHR8mCL,
	llvm::X86::ADC8mr,
	llvm::X86::ADD8mr,
	llvm::X86::AND8mr,
	llvm::X86::CMPXCHG8rm,
	llvm::X86::LCMPXCHG8,
	llvm::X86::LOCK_ADD8mr,
	llvm::X86::LOCK_AND8mr,
	llvm::X86::LOCK_OR8mr,
	llvm::X86::LOCK_SUB8mr,
	llvm::X86::LOCK_XOR8mr,
	llvm::X86::OR8mr,
	llvm::X86::RELEASE_MOV8mr,
	llvm::X86::SBB8mr,
	llvm::X86::SUB8mr,
	llvm::X86::XADD8rm,
	llvm::X86::XOR8mr,
	llvm::X86::ADC8mi,
	llvm::X86::ADC8mi8,
	llvm::X86::ADD8mi,
	llvm::X86::ADD8mi8,
	llvm::X86::AND8mi,
	llvm::X86::AND8mi8,
	llvm::X86::LOCK_ADD8mi,
	llvm::X86::LOCK_AND8mi,
	llvm::X86::LOCK_OR8mi,
	llvm::X86::LOCK_SUB8mi,
	llvm::X86::LOCK_XOR8mi,
	llvm::X86::MOV8mi,
	llvm::X86::OR8mi,
	llvm::X86::OR8mi8,
	llvm::X86::RCL8mi,
	llvm::X86::RCR8mi,
	llvm::X86::RELEASE_ADD8mi,
	llvm::X86::RELEASE_AND8mi,
	llvm::X86::RELEASE_MOV8mi,
	llvm::X86::RELEASE_OR8mi,
	llvm::X86::RELEASE_XOR8mi,
	llvm::X86::ROL8mi,
	llvm::X86::ROR8mi,
	llvm::X86::SAR8mi,
	llvm::X86::SBB8mi,
	llvm::X86::SHL8mi,
	llvm::X86::SHR8mi,
	llvm::X86::SUB8mi,
	llvm::X86::SUB8mi8,
	llvm::X86::XOR8mi,
	llvm::X86::XOR8mi8
};

size_t WRITE_8_SIZE = sizeof(WRITE_8)/sizeof(unsigned);

unsigned WRITE_16[] = { 
	llvm::X86::MOV16mr,
	llvm::X86::ISTT_FP16m,
	llvm::X86::IST_F16m,
	llvm::X86::IST_FP16m,
	llvm::X86::MOVBE16mr,
	llvm::X86::MOV16mi,
	llvm::X86::POP16rmm,
	llvm::X86::DEC16m,
	llvm::X86::INC16m,
	llvm::X86::LOCK_DEC16m,
	llvm::X86::LOCK_INC16m,
	llvm::X86::NEG16m,
	llvm::X86::NOT16m,
	llvm::X86::RCL16m1,
	llvm::X86::RCL16mCL,
	llvm::X86::RCR16m1,
	llvm::X86::RCR16mCL,
	llvm::X86::RELEASE_DEC16m,
	llvm::X86::RELEASE_INC16m,
	llvm::X86::ROL16m1,
	llvm::X86::ROL16mCL,
	llvm::X86::ROR16m1,
	llvm::X86::ROR16mCL,
	llvm::X86::SAR16m1,
	llvm::X86::SAR16mCL,
	llvm::X86::SHL16m1,
	llvm::X86::SHL16mCL,
	llvm::X86::SHR16m1,
	llvm::X86::SHR16mCL,
	llvm::X86::ADC16mr,
	llvm::X86::ADD16mr,
	llvm::X86::AND16mr,
	llvm::X86::BT16mr,
	llvm::X86::BTC16mr,
	llvm::X86::BTR16mr,
	llvm::X86::BTS16mr,
	llvm::X86::CMPXCHG16rm,
	llvm::X86::LCMPXCHG16,
	llvm::X86::LOCK_ADD16mr,
	llvm::X86::LOCK_AND16mr,
	llvm::X86::LOCK_OR16mr,
	llvm::X86::LOCK_SUB16mr,
	llvm::X86::LOCK_XOR16mr,
	llvm::X86::OR16mr,
	llvm::X86::SBB16mr,
	llvm::X86::SHLD16mrCL,
	llvm::X86::SHRD16mrCL,
	llvm::X86::SUB16mr,
	llvm::X86::XADD16rm,
	llvm::X86::XOR16mr,
	llvm::X86::SHLD16mri8,
	llvm::X86::SHRD16mri8,
	llvm::X86::ADC16mi8,
	llvm::X86::ADD16mi8,
	llvm::X86::AND16mi8,
	llvm::X86::BT16mi8,
	llvm::X86::BTC16mi8,
	llvm::X86::BTR16mi8,
	llvm::X86::BTS16mi8,
	llvm::X86::LOCK_ADD16mi8,
	llvm::X86::LOCK_AND16mi8,
	llvm::X86::LOCK_OR16mi8,
	llvm::X86::LOCK_SUB16mi8,
	llvm::X86::LOCK_XOR16mi8,
	llvm::X86::OR16mi8,
	llvm::X86::SBB16mi8,
	llvm::X86::SUB16mi8,
	llvm::X86::XOR16mi8,
	llvm::X86::ADC16mi,
	llvm::X86::ADD16mi,
	llvm::X86::AND16mi,
	llvm::X86::LOCK_ADD16mi,
	llvm::X86::LOCK_AND16mi,
	llvm::X86::LOCK_OR16mi,
	llvm::X86::LOCK_SUB16mi,
	llvm::X86::LOCK_XOR16mi,
	llvm::X86::OR16mi,
	llvm::X86::SBB16mi,
	llvm::X86::SUB16mi,
	llvm::X86::XOR16mi,
	llvm::X86::RCL16mi,
	llvm::X86::RCR16mi,
	llvm::X86::SAR16mi,
	llvm::X86::SHL16mi,
	llvm::X86::SHR16mi
};

size_t WRITE_16_SIZE = sizeof(WRITE_16)/sizeof(unsigned);

unsigned WRITE_32[] = { 
	llvm::X86::MOV32mr,
	llvm::X86::ISTT_FP32m,
	llvm::X86::IST_F32m,
	llvm::X86::IST_FP32m,
	llvm::X86::POP32rmm,
	llvm::X86::STMXCSR,
	llvm::X86::VSTMXCSR,
	llvm::X86::MOVSS2DImr,
	llvm::X86::VMOVSS2DImr,
	llvm::X86::VMOVSS2DIZmr,
	llvm::X86::MOVBE32mr,
	llvm::X86::MOVNTImr,
	llvm::X86::MOV32mi,
	llvm::X86::DEC32m,
	llvm::X86::INC32m,
	llvm::X86::LOCK_DEC32m,
	llvm::X86::LOCK_INC32m,
	llvm::X86::NEG32m,
	llvm::X86::NOT32m,
	llvm::X86::RCL32m1,
	llvm::X86::RCL32mCL,
	llvm::X86::RCR32m1,
	llvm::X86::RCR32mCL,
	llvm::X86::ROL32m1,
	llvm::X86::ROL32mCL,
	llvm::X86::ROR32m1,
	llvm::X86::ROR32mCL,
	llvm::X86::SAR32m1,
	llvm::X86::SAR32mCL,
	llvm::X86::SHL32m1,
	llvm::X86::SHL32mCL,
	llvm::X86::SHR32m1,
	llvm::X86::SHR32mCL,
	llvm::X86::ADC32mr,
	llvm::X86::ADD32mr,
	llvm::X86::AND32mr,
	llvm::X86::CMPXCHG32rm,
	llvm::X86::LCMPXCHG32,
	llvm::X86::LOCK_ADD32mr,
	llvm::X86::LOCK_AND32mr,
	llvm::X86::LOCK_OR32mr,
	llvm::X86::LOCK_SUB32mr,
	llvm::X86::LOCK_XOR32mr,
	llvm::X86::OR32mr,
	llvm::X86::OR32mrLocked,
	llvm::X86::SBB32mr,
	llvm::X86::SHLD32mrCL,
	llvm::X86::SHRD32mrCL,
	llvm::X86::SUB32mr,
	llvm::X86::XADD32rm,
	llvm::X86::XOR32mr,
	llvm::X86::SHLD32mri8,
	llvm::X86::SHRD32mri8,
	llvm::X86::ADC32mi8,
	llvm::X86::ADD32mi8,
	llvm::X86::AND32mi8,
	llvm::X86::LOCK_ADD32mi8,
	llvm::X86::LOCK_AND32mi8,
	llvm::X86::LOCK_OR32mi8,
	llvm::X86::LOCK_SUB32mi8,
	llvm::X86::LOCK_XOR32mi8,
	llvm::X86::OR32mi8,
	llvm::X86::SBB32mi8,
	llvm::X86::SUB32mi8,
	llvm::X86::XOR32mi8,
	llvm::X86::ADC32mi,
	llvm::X86::ADD32mi,
	llvm::X86::AND32mi,
	llvm::X86::LOCK_ADD32mi,
	llvm::X86::LOCK_AND32mi,
	llvm::X86::LOCK_OR32mi,
	llvm::X86::LOCK_SUB32mi,
	llvm::X86::LOCK_XOR32mi,
	llvm::X86::OR32mi,
	llvm::X86::SBB32mi,
	llvm::X86::SUB32mi,
	llvm::X86::XOR32mi,
	llvm::X86::RCL32mi,
	llvm::X86::RCR32mi,
	llvm::X86::ROL32mi,
	llvm::X86::ROR32mi,
	llvm::X86::SAR32mi,
	llvm::X86::SHL32mi,
	llvm::X86::SHR32mi
};

size_t WRITE_32_SIZE = sizeof(WRITE_32)/sizeof(unsigned);

unsigned WRITE_64[] = { 
	llvm::X86::MOV64mr,
	llvm::X86::ILD_F64m,
	llvm::X86::ISTT_FP64m,
	llvm::X86::IST_FP64m,
	llvm::X86::POP64rmm,
	llvm::X86::MOV64mi32,
	llvm::X86::CMPXCHG8B,
	llvm::X86::DEC64m,
	llvm::X86::INC64m,
	llvm::X86::LCMPXCHG8B,
	llvm::X86::LOCK_DEC64m,
	llvm::X86::LOCK_INC64m,
	llvm::X86::NEG64m,
	llvm::X86::NOT64m,
	llvm::X86::RCL64m1,
	llvm::X86::RCL64mCL,
	llvm::X86::RCR64m1,
	llvm::X86::RCR64mCL,
	llvm::X86::ROL64m1,
	llvm::X86::ROL64mCL,
	llvm::X86::ROR64m1,
	llvm::X86::ROR64mCL,
	llvm::X86::SAR64m1,
	llvm::X86::SAR64mCL,
	llvm::X86::SHL64m1,
	llvm::X86::SHL64mCL,
	llvm::X86::SHR64m1,
	llvm::X86::SHR64mCL,
	llvm::X86::ADC64mr,
	llvm::X86::ADD64mr,
	llvm::X86::AND64mr,
	llvm::X86::CMPXCHG64rm,
	llvm::X86::LCMPXCHG64,
	llvm::X86::LOCK_ADD64mr,
	llvm::X86::LOCK_AND64mr,
	llvm::X86::LOCK_OR64mr,
	llvm::X86::LOCK_SUB64mr,
	llvm::X86::LOCK_XOR64mr,
	llvm::X86::OR64mr,
	llvm::X86::SBB64mr,
	llvm::X86::SHLD64mrCL,
	llvm::X86::SHRD64mrCL,
	llvm::X86::SUB64mr,
	llvm::X86::XADD64rm,
	llvm::X86::XOR64mr,
	llvm::X86::SHLD64mri8,
	llvm::X86::SHRD64mri8,
	llvm::X86::ADC64mi32,
	llvm::X86::ADD64mi32,
	llvm::X86::AND64mi32,
	llvm::X86::LOCK_ADD64mi32,
	llvm::X86::LOCK_AND64mi32,
	llvm::X86::LOCK_OR64mi32,
	llvm::X86::LOCK_SUB64mi32,
	llvm::X86::LOCK_XOR64mi32,
	llvm::X86::OR64mi32,
	llvm::X86::SBB64mi32,
	llvm::X86::SUB64mi32,
	llvm::X86::XOR64mi32,
	llvm::X86::ADC64mi8,
	llvm::X86::ADD64mi8,
	llvm::X86::AND64mi8,
	llvm::X86::LOCK_ADD64mi8,
	llvm::X86::LOCK_AND64mi8,
	llvm::X86::LOCK_OR64mi8,
	llvm::X86::LOCK_SUB64mi8,
	llvm::X86::LOCK_XOR64mi8,
	llvm::X86::OR64mi8,
	llvm::X86::SBB64mi8,
	llvm::X86::SUB64mi8,
	llvm::X86::XOR64mi8,
	llvm::X86::RCL64mi,
	llvm::X86::RCR64mi,
	llvm::X86::ROL64mi,
	llvm::X86::ROR64mi,
	llvm::X86::SAR64mi,
	llvm::X86::SHL64mi,
	llvm::X86::SHR64mi
};

size_t WRITE_64_SIZE = sizeof(WRITE_64)/sizeof(unsigned);

unsigned STACK_WRITE_16[] = {
	llvm::X86::PUSH16rmm,
	llvm::X86::PUSH16rmr,
	llvm::X86::PUSH16r,
	llvm::X86::PUSH16i8,
	llvm::X86::PUSHi16,
};

size_t STACK_WRITE_16_SIZE = sizeof(STACK_WRITE_16)/sizeof(unsigned);

unsigned STACK_WRITE_32[] = {
	llvm::X86::PUSH32rmm,
	llvm::X86::PUSH32rmr,
	llvm::X86::PUSH32r,
	llvm::X86::PUSH32i8,
	llvm::X86::PUSHi32
};

size_t STACK_WRITE_32_SIZE = sizeof(STACK_WRITE_32)/sizeof(unsigned);

unsigned STACK_WRITE_64[] = {
	llvm::X86::PUSH64rmm,
	llvm::X86::PUSH64rmr,
	llvm::X86::PUSH64r,
	llvm::X86::PUSH64i8,
	llvm::X86::PUSH64i32,
	llvm::X86::CALL16m,
	llvm::X86::CALL32m,
	llvm::X86::CALL64m,
	llvm::X86::CALL16r,
	llvm::X86::CALL32r,
	llvm::X86::CALL64r,
	llvm::X86::CALL64pcrel32,
	llvm::X86::CALLpcrel16,
	llvm::X86::CALLpcrel32
};

size_t STACK_WRITE_64_SIZE = sizeof(STACK_WRITE_64)/sizeof(unsigned);

unsigned STACK_READ_16[] = {
	llvm::X86::POP16rmm,
	llvm::X86::POP16r
};

size_t STACK_READ_16_SIZE = sizeof(STACK_READ_16)/sizeof(unsigned);

unsigned STACK_READ_32[] = {
	llvm::X86::POP32rmm,
	llvm::X86::POP32r,
};

size_t STACK_READ_32_SIZE = sizeof(STACK_READ_32)/sizeof(unsigned);

unsigned STACK_READ_64[] = {
	llvm::X86::POP64rmm,
	llvm::X86::POP64r,
	llvm::X86::RETL,
	llvm::X86::RETQ,
	llvm::X86::RETW,
	llvm::X86::RETIL,
	llvm::X86::RETIQ,
	llvm::X86::RETIW
};

size_t STACK_READ_64_SIZE = sizeof(STACK_READ_64)/sizeof(unsigned);

uint16_t MEMACCESS_INFO_TABLE[llvm::X86::INSTRUCTION_LIST_END] = {0};

void initMemAccessInfo() {
    for(size_t i = 0; i < READ_8_SIZE; i++) {
        MEMACCESS_INFO_TABLE[READ_8[i]] |= READ(1);
    }
    for(size_t i = 0; i < READ_16_SIZE; i++) {
        MEMACCESS_INFO_TABLE[READ_16[i]] |= READ(2);
    }
    for(size_t i = 0; i < READ_32_SIZE; i++) {
        MEMACCESS_INFO_TABLE[READ_32[i]] |= READ(4);
    }
    for(size_t i = 0; i < READ_64_SIZE; i++) {
        MEMACCESS_INFO_TABLE[READ_64[i]] |= READ(8);
    }
    for(size_t i = 0; i < WRITE_8_SIZE; i++) {
        MEMACCESS_INFO_TABLE[WRITE_8[i]] |= WRITE(1);
    }
    for(size_t i = 0; i < WRITE_16_SIZE; i++) {
        MEMACCESS_INFO_TABLE[WRITE_16[i]] |= WRITE(2);
    }
    for(size_t i = 0; i < WRITE_32_SIZE; i++) {
        MEMACCESS_INFO_TABLE[WRITE_32[i]] |= WRITE(4);
    }
    for(size_t i = 0; i < WRITE_64_SIZE; i++) {
        MEMACCESS_INFO_TABLE[WRITE_64[i]] |= WRITE(8);
    }
    for(size_t i = 0; i < STACK_READ_16_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_READ_16[i]] |= STACK_READ(2);
    }
    for(size_t i = 0; i < STACK_READ_32_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_READ_32[i]] |= STACK_READ(4);
    }
    for(size_t i = 0; i < STACK_READ_64_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_READ_64[i]] |= STACK_READ(8);
    }
    for(size_t i = 0; i < STACK_WRITE_16_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_WRITE_16[i]] |= STACK_WRITE(2);
    }
    for(size_t i = 0; i < STACK_WRITE_32_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_WRITE_32[i]] |= STACK_WRITE(4);
    }
    for(size_t i = 0; i < STACK_WRITE_64_SIZE; i++) {
        MEMACCESS_INFO_TABLE[STACK_WRITE_64[i]] |= STACK_WRITE(8);
    }
}

unsigned getReadSize(const llvm::MCInst* inst) {
    return GET_READ_SIZE(MEMACCESS_INFO_TABLE[inst->getOpcode()]);
}

unsigned getWriteSize(const llvm::MCInst* inst) {
    return GET_WRITE_SIZE(MEMACCESS_INFO_TABLE[inst->getOpcode()]);
}

bool isStackRead(const llvm::MCInst* inst) {
    return IS_STACK_READ(MEMACCESS_INFO_TABLE[inst->getOpcode()]);
}

bool isStackWrite(const llvm::MCInst* inst) {
    return IS_STACK_WRITE(MEMACCESS_INFO_TABLE[inst->getOpcode()]);
}

};
